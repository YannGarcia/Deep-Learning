FROM ubuntu:20.04

MAINTAINER yann garcia <garcia.yann@gmail.com>

LABEL description="Keras Deep Leaning Ubuntu image"

ENV TERM=linux \
    HOSTNAME=docker-keras

<<<<<<< HEAD
=======
ARG ARG_KAGGLE_USERNAME=yanngarcia
ARG ARG_KAGGLE_KEY

>>>>>>> 13dfa990e926953c400191b37bca1036884024f7
RUN echo "docker-STF-dev" > /etc/hostname \
    && DEBIAN_FRONTEND=noninteractive apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y \
    && DEBIAN_FRONTEND=noninteractive apt-get install software-properties-common -y \
    && DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:linuxuprising/java -y \
    && DEBIAN_FRONTEND=noninteractive apt-get update \
    && ( echo "oracle-java14-installer shared/accepted-oracle-license-v1-2 boolean true" | debconf-set-selections -v ) \
    && DEBIAN_FRONTEND=noninteractive apt-get --allow-unauthenticated install -y \
      autoconf \
      bison \
      build-essential \
      ca-certificates \
      cmake \
      curl \
      dos2unix \
      doxygen \
      emacs \
      expect \
      flex \
      g++-9 \
      gcc-9 \
      gdb \
      git \
      gnutls-bin \
      graphviz \
      iputils-ping \
      libedit2 \
      libedit-dev \
      libffi-dev \
      libglib2.0-dev \
      libgcrypt-dev \
      libjsoncpp-dev \
      libncurses5-dev \
      libpcap-dev \
      libqt5svg5-dev \
      libssl-dev \
      libtool-bin \
      libtool \
      libxml2-dev \
      libxml2-utils \
      libyaml-dev \
      lsof \
      net-tools \
      ntp \
      oracle-java15-installer \
      oracle-java15-set-default \
      openssh-server \
      pkg-config \
      python3-dev \
      python3-pip \
      python3-setuptools \
      sudo \
      sshpass \
      tcpdump \
      texlive-font-utils \
      tzdata \
      valgrind \
      vim \
      vsftpd \
      xutils-dev \
      tree \
      unzip \
      wget \
      xsltproc \
    && DEBIAN_FRONTEND=noninteractive apt-get autoremove --purge -y \
    && DEBIAN_FRONTEND=noninteractive apt-get autoclean \
    && python3 -m pip install --upgrade pip \
    && python3 -m pip install --upgrade setuptools \
    && python3 -m pip install scikit-learn pandas-profiling xgboost lightgbm eli5 seaborn seaborn-image keras keras_preprocessing pickle5 tensorflow jupyter jupyter_http_over_ws h5py requests flask kaggle \
    && jupyter serverextension enable --py jupyter_http_over_ws \
    && useradd --create-home --shell /bin/bash yann \
    && echo "yann:yann" | chpasswd \
    && adduser yann sudo \
    && echo "" >> /etc/profile \
    && echo 'export HOME=/home/yann' >> /etc/profile \
    && echo 'export LD_LIBRARY_PATH=${HOME}/lib:$LD_LIBRARY_PATH' >> /etc/profile \
    && echo 'export PATH=${HOME}/bin:$PATH' >> /etc/profile \
    && echo 'cd ${HOME}' >> /etc/profile \
<<<<<<< HEAD
    && cd /home/yann \
    && echo "" >> ./.profile \
    && echo 'export HOME=/home/yann' >> ./.bashrc \
    && echo 'export LD_LIBRARY_PATH=${HOME}/lib:$LD_LIBRARY_PATH' >> ./.bashrc \
    && echo 'export PATH=${HOME}/bin:$PATH' >> ./.bashrc \
    && echo 'cd ${HOME}' >> ./.bashrc \
    && mkdir -p bin lib include tmp frameworks docs man dev notebooks \
    && chown -R yann:yann * \
    && cd notebooks \


RUN --mount=type=secret,id=kaggle_key_json,dst=/home/yann/home/yann/.kaggle/kaggle.json cat /kaggleKeyAPI.json \
    && chmod 600 /home/yann/.kaggle/kaggle.json \
    && export KAGGLE_CONFIG_DIR=/home/yann/.kaggle \


RUN kaggle datasets download nickuzmenkov/nih-chest-xrays-tfrecords \


#    && unzip nih-chest-xrays-tfrecords.zip && rm nih-chest-xrays-tfrecords.zip \
#    && kaggle datasets download iarunava/cell-images-for-detecting-malaria \
#    && unzip cell-images-for-detecting-malaria.zip && rm cell-images-for-detecting-malaria.zip \
#    && cd - \
=======
    && echo ". ./devenv.bash" >> /etc/profile \
    && cd /home/yann \
    && echo "" >> ./.profile \
    && echo 'export HOME=/home/yann' >> ./.profile \
    && echo 'export LD_LIBRARY_PATH=${HOME}/lib:$LD_LIBRARY_PATH' >> ./.profile \
    && echo 'export PATH=${HOME}/bin:$PATH' >> ./.profile \
    && echo 'export KAGGLE_USERNAME=$ARG_KAGGLE_USERNAME' >> ./.profile \
    && echo 'export KAGGLE_KEY=$ARG_KAGGLE_USERNAME' >> ./.profile \
    && echo 'cd ${HOME}' >> ./.profile \
    && echo ". ./devenv.bash" >> ./.profile \
    && mkdir -p bin lib include tmp frameworks docs man dev notebooks \
    && chown -R yann:yann * \
    && cd notebooks \
    && kaggle datasets download nickuzmenkov/nih-chest-xrays-tfrecords \
    && unzip nih-chest-xrays-tfrecords.zip && rm nih-chest-xrays-tfrecords.zip \
    && kaggle datasets download iarunava/cell-images-for-detecting-malaria \
    && unzip cell-images-for-detecting-malaria.zip && rm cell-images-for-detecting-malaria.zip \
    && cd - \
>>>>>>> 13dfa990e926953c400191b37bca1036884024f7


EXPOSE 22 80 443 8888

CMD ["/bin/bash", "-c", "jupyter notebook --notebook-dir=/home/yann/notebooks --ip 0.0.0.0 --no-browser --allow-root --NotebookApp.token="]

# That's all Floks
